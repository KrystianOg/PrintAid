services:
  postgres:
    image: postgres:17-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-medusa}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-medusa}_redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory ${REDIS_MAX_MEMORY:-256mb} --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  medusa:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
      args:
        NODE_VERSION: ${NODE_VERSION:-24}
    image: ${COMPOSE_PROJECT_NAME:-medusa}/backend:${IMAGE_TAG:-latest}
    container_name: ${COMPOSE_PROJECT_NAME:-medusa}_backend
    restart: unless-stopped
    working_dir: /app
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    env_file:
      - .env
      - .env.${NODE_ENV:-development}
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${MEDUSA_PORT:-9000}
    volumes:
      - medusa_uploads:/app/uploads
    ports:
      - "${MEDUSA_PORT:-9000}:${MEDUSA_PORT:-9000}"
    networks:
      - medusa_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  minio:
    image: minio/minio:latest
    container_name: ${COMPOSE_PROJECT_NAME:-medusa}_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    ports:
      - "${MINIO_PORT:-9002}:9000" # S3 API
      - "${MINIO_CONSOLE_PORT:-9003}:9001" # MinIO Console
    volumes:
      - minio_data:/data
    networks:
      - medusa_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  medusa_node_modules:
    driver: local
  medusa_uploads:
    driver: local
  minio_data:
    driver: local

networks:
  medusa_network:
    driver: bridge
    name: ${COMPOSE_PROJECT_NAME:-medusa}_network
